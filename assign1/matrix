#!/bin/bash
######################################################
# Name: Travis Laxson | laxsont@oregonstate.edu
# Date: 28 January 2019
# File Description: 
# This bash shell script computes and displays the
# result of the following matrix operations:
#	1. Dimensions
#	2. Transpose
#	3. Mean vector 
#	4. Addition
#	5. Multiplication 
# Each matrix operation is a standalone function in
# the script and may be invoked from the command line.
######################################################

# Temp files used in the script
datafilepath="datafile$$"
tempCol="tempcolfile$$"
tempsumfile="tempsumfile$$"
avgfile=$"tempavgfile$$"

# File cleanup protocol and maintenanance 
trap "rm -f $avgfile $tempCol $tempsumfile $datafilepath" EXIT INT HUP TERM 

######################################################
	# Dims Function Definition
######################################################
# Name: 
#	dims

# Description: 
# 	This function will accept one file argument
# 	from the command line containing an MxN matrix
#	and print the matrix dimensions. It prints the
#	dimensions MxN where M equals the number of
#	rows and N equals the number of columns.

# Inputs: 
#	Argument 1 - matrix file 1 = MxN

# Example command line input:
#	"./matrix dims m1"
#	where m1 = 2x4 matrix file

# Output:
# 	For an example 2x4 matrix the output
# 	to the terminal would be as follows:
#	2 4
######################################################
dims() {
	
	# Get number of rows
	rows=$(wc -l < $datafilepath)			
	
	# Get total number count from 
	numcount=$(wc -w < $datafilepath)		

	# Calculate number of columns
	cols=$(( numcount / rows ))		

	# Display rows and cols "rows cols"
	echo "$rows $cols"			
}

######################################################
	# Transpose Function Definition
######################################################
# Name: 
#	transpose

# Description: 
# 	This function will accept one file argument
# 	from the command line containing an MxN matrix
#	and reflect the elements of the matrix along
#	the main diagonal (i.e. An MxN becomes NxM).

# Inputs: 
#	Argument 1 - matrix file 1 = MxN

# Example command line input:
#	"./matrix transpose m1"
#	where m1 = 2x4 matrix file

# Output:
# 	Transposed matrix where MxN becomes NxM
######################################################
transpose() {
	
	# Initialize counter var
	i=0		

	# Read the input file argument into read to 
	# read each line in a file
	while read numberLine
	do
		# Initialize count for number of columns
		colscount=0

		# Iterate over each column and count number
		# of columns
		# Edit: Poor design choice
		for each in $numberLine 
		do			
			colscount=$(( colscount + 1 ))
		done
		
		# While counter is less than columns cut
		# each field indicated by the value of 
		# the counter var $i 
		while [[ $i -lt $colscount ]]
		do
			# Increment counter - starts 1
			(( i++ ))

			# Assign new column var to cut column 
			# piped and converted from newline to tabs			
			newcol=$(cut -f $i $datafilepath | tr '\n' '\t')
			
			# Print the value minus the last character
			echo "${newcol%?}" >> $tempCol
		done
	done < $datafilepath

	# Send data to stdout
	cat < $tempCol		
}

######################################################
	# Mean Function Definition
######################################################
# Name: 
#	mean

# Description: 
# 	This function will accept one file argument
# 	from the command line containing an MxN matrix
#	and calculate the mean for each column in the
# 	matrix, respectively. Thus, the mean function
#	returns a row vector containing the mean for
#	each respective column. 

# Inputs: 
#	Argument 1 - matrix file 1 = MxN

# Example command line input:
#	"./matrix mean m1"
#	where m1 = 2x4 matrix file

# Output:
# 	Row vector with mean from each column
#	of the matrix file argument
######################################################
mean() {
	# Get the number of columns
	numcount=$( wc -w < $datafilepath)

	# Get the number of lines	
	lincount=$( wc -l < $datafilepath)
	
	# Calculate the columns
	colcount=$(( numcount / lincount))

	# Initialize counter var
	i=1

	# Iterate until i = number of columns from matrix file input
	while [[ $i -le $colcount ]]
	do 
		# Initialize sum & avg for each column
		sum=0
		avg=0
	
		# Cut columns and store into tempfile
		cutcol=$(cut -f $i $datafilepath)
		echo "$cutcol" > $tempCol

		# Read each numebr from the tempCol file and calculate running sum total
		while read number
		do
			sum=$(( sum + number )) 
		done < $tempCol

		# Calculate float average
		avg=$(( ($sum + ($lincount/2) * (($sum>0)*2-1)) / $lincount ))
		
		# Append avg to avgfile 
		echo "$avg" >> $avgfile

		#Tranform avgfile from cols to rows (replace all newlines with tabs)
		display=$(cat $avgfile | tr '\n' '\t')

		#Overwrite avgfile with transformed display minus last tab character
		echo "${display%?}" > $avgfile

	#Increment i value while i <= number of columns 
	(( i++ ))

	done

	#Display avgfile to terminal
	cat $avgfile	
}

######################################################
	# Add Function Definition
######################################################
# Name: 
#	add

# Description: 
# 	This function will accept two file
# 	arguments (files with matrixes MxN and MxN)
#	from the command line and validate the inputs
# 	before adding the matrices and displaying
# 	the product matrix, respectively. Matrix 
# 	addition is only performed on matrices with
# 	the same dimensions (i.e. equal number of rows
# 	and columns). 

# Inputs: 
#	Argument 1 - matrix file 1 = MxN
#	Argument 2 - matrix file 2 = MxN

# Example command line input:
#	"./matrix add m1 m1"
#	where m1 = 2x4 matrix file

# Output:
# 	Resulting MxN sum matrix
######################################################
add() {
	# Declare arrays from the command line args
	# Arg1
	numarray1=( $(cat $datafilepath) )
	
	# Arg2
	numarray2=( $(cat $tempsumfile) )	
	
	# Initialize counter used to maintain array dimensions
	count=1

	# Iterate through all array elements
	# Source: https://stackoverflow.com/questions/17403498/iterate-over-two-arrays-simultaneously-in-bash
	for ((i=0; i<${#numarray1[@]};++i))	
	do
		# Calculate resulting sum iteratively from arrays
		sum=0
		sum=$(( ${numarray1[i]} + ${numarray2[i]} ))
	
		# Maintain dims of sum vector array with original 
		if [[ $count -lt $datafilepathcols ]]
		then
			# Print sum on same line separated by tab
			printf "%d\t" $sum 
		
			# Increment count var
			(( count++ ))
		else	
			# Print sum on new line
			printf "%d\n" $sum
			
			# Reset count for new row
			count=1
		fi
	done
}

######################################################
	# Multiply Function Definition
######################################################
# Name: 
#	multiply

# Description: 
# 	This function will accept two file
# 	arguments (files with matrixes MxN and NxP)
#	from the command line and validate the inputs
# 	before multiplying the matrices and displaying
# 	the product matrix, respectively. Matrix 
# 	multiplication is performed using the dot
# 	product of rows and columns from each matrix.    

# Inputs: 
#	Argument 1 - matrix file 1 = MxN
#	Argument 2 - matrix file 2 = NxP

# Example command line input:
#	"./matrix multiply m1 m2"
#	where m1 = 2x4 matrix file and
#	 m2 = 4x2 matrix file

# Output:
# 	Resulting dot product matrix = MxP
######################################################
multiply() {

	# Get rows and cols for matrix 1	
	matrix1rows=$(wc -l < $matrix1tempfile)
	matrix1nums=$(wc -w < $matrix1tempfile)
	matrix1cols=$(( matrix1nums / matrix1rows ))
	
	# Get matrix 2 rows and cols
	matrix2rows=$(wc -l < $matrix2tempfile)
	matrix2nums=$(wc -w < $matrix2tempfile)
	matrix2cols=$(( matrix2nums / matrix2rows ))
	
	# Assign rows and cols of product matrix
	# Matrix multiplication rule
	matrix3rows=$matrix1rows
	matrix3cols=$matrix2cols

	# Declare matrices
	declare -a matrix1
	declare -a matrix2

	# Assign matrix 1 and matrix 2 variables from the temp files
	matrix1=( $(cat "$matrix1tempfile") )    
	matrix2=( $(cat "$matrix2tempfile") )       
	
	
	# Matrix multiplication logic - Initialize count to 1 for keeping track of resulting product matrix rows and cols
	count=1

	# Format the output to be equal to number of rows and cols of the product matrix 3
	for ((row=0; row<$matrix3rows; row++))
	do
		for ((col=0; col<$matrix3cols; col++))
		do
			# Assign zero to matrix product for resetting product in subsequent multiplication steps
			product=0		

			# Iterate through each of the indices specifically to use for product calculation 
			for ((i=0; i<$matrix1cols; i++))
			do
				# Temp var for calculating index1 for matrix1
				row1="$row"				

				# Temp var for calculating index1 for matrix1
				col1="$i"				

				# Calculate index1 = row1 * cols in matrix1 + value of i 
				index1=$(( (row1 * matrix1cols) + col1 ))

				# Temp var for calculating index2 for matrix2
				row2="$i"				

				# Temp car for calculating index2 for matrix2
				col2="$col"				

				# Calculate index2 = row2 * cols in matrix2 + value of i
				index2=$(( (row2 * matrix2cols) + col2 ))	

				# Assign integer output of matrix1 array at index1 to var
				matrix1output=${matrix1[$index1]}						

				# Assign integer output of matrix2 array at index2 to var
				matrix2output=${matrix2[$index2]}		
				
				 # Calculate the dot product
				product=$(( product + (matrix1output * matrix2output) ))
  			done
				# Format stdout of product matrix	
				if [[ $count -lt $matrix3cols ]]
				then
					printf "%d\t" $product
					# Increment count to continue printing on same line
					(( count++ ))					
				else
					count=1			

					# Reset count for next row of output
					printf "%d\n" $product
				fi
		done
	done
}

##################################################
# Script execution statements
# How the script handles piping stdout into stdin
# and stdin directly as a command line argument 
##################################################

# Execute conditions for the functions dims, transpose, and mean
# Since each function only requires one file argument their conditions
# are the same
if [[ "$1" == "dims" ]] || [[ "$1" == "transpose" ]] || [[ "$1" == "mean" ]]
then
	# Execution logic for dims, transpose, and mean functions
	if [[ $# -eq 1 ]]
	then
		# Read in stdin to datafile
		cat > $datafilepath	
	elif [[ $# -eq 2 ]]
	then
		# Assign Arg2 to datadilepath temp file
		datafilepath=$2		
	else
		# Validate for incorrect number of args passed in command
		echo "Error: Invalid number of arguments." 1>&2		
		exit 1
	fi	
	
	# Validate file exists or display error message
	if [[ ! -f $datafilepath ]]
	then
		echo "Error: File $datafilepath does not exist." 1>&2
		exit 1
	fi
# Execute add function
elif [[ "$1" == "add" ]]
then
	# Validate number of arguments passed to add function equals 3, else display error
	if [[ "$#" != "3" ]]  
	then
		echo "Invalid argument count. Enter two arguments only." 1>&2
		exit 1
	else 
		# Assign command line arguments to temp files
		datafilepath=$2 
		tempsumfile=$3

		# Get number of rows and cols for each of the temp files passed to add function
		datafilepathlines=$(wc -l < $datafilepath)
		datafilepathwords=$(wc -w < $datafilepath)
		datafilepathcols=$(( datafilepathwords / datafilepathlines ))	
		tempsumfilelines=$(wc -l < $tempsumfile)
		tempsumfilenums=$(wc -w < $tempsumfile)
		tempsumfilecols=$(( tempsumfilenums / tempsumfilelines ))
		
		# Check for proper matrix dimensions 
		if [[ $datafilepathlines != $tempsumfilelines ]] || [[ $datafilepathcols != $tempsumfilecols ]]
		then
			echo "Wrong sized matrices!" 1>&2
			exit 1
		fi
	fi
	# Display error message if file DNE
	if [[ ! -f $datafilepath ]]
	then
		echo "Error: File $datafilepath does not exist." 1>&2
		exit 1
	fi
# Execute multiply function
elif [[ $1 == "multiply" ]]	
then
	# Assign command line arguments to tempfiles
	matrix1tempfile=$2
	matrix2tempfile=$3
	
	# Get number of rows and cols for matrices 1 & 2 passed to multiply function
	matrix1rows=$(wc -l < $matrix1tempfile)
	matrix1nums=$(wc -w < $matrix1tempfile)
	matrix1cols=$(( matrix1nums / matrix1rows ))
	matrix2rows=$(wc -l < $matrix2tempfile)
	matrix2nums=$(wc -w < $matrix2tempfile)
	matrix2cols=$(( matrix2nums / matrix2rows ))
	
	# Check for valid argument count
	if [[ "$#" != "3" ]]  
	then
		echo "Invalid argument count. Enter two arguments only." 1>&2
		exit 1
	# Check if matrix multiplication is allowed based on passed in arguments
	elif [[ $matrix1cols != $matrix2rows ]]
	then
		echo "Invalid sized matrices. Double-check cols of matrix1 equals rows of matrix2" 1>&2
		exit 1
	# Check if files exist 
	elif [[ ! -f $matrix1tempfile ]] || [[ ! -f $matrix2tempfile ]]
	then
		echo "File not found. Pass valid file argument with command." 1>&2
		exit 1
	fi
fi

# Execution statement to process command line arguments - source: Assignment 1 description
$1 "${@:2}"
