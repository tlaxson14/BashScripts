#!/bin/bash
# Name: Travis Laxson
# Date: Jan. 18 2019
# Description: This shell script computes matrix operations 
# including printing the dimensions, matrix transpositions,
# mean vector calculation, addition of two matrices, and
# multiplication of two matrices. 

datafilepath="datafile$$"
tempCol="tempcolfile$$"
tempRow="temprowfile$$"
tempRow1="temprowfile1$$"
tempCol1="tempcolfile1$$"
tempfile="tempsumfile$$"
tempsumfile="sumfile$$"
tempsumfile2="sumfile2$$"
avgfile=$"tempavgfile$$"
tempdatafilepath=$"tempdatafile$$"
temptempfile=$"tempfile$$"
tempaddfile=$"tempaddfile$"
trap "rm -f $tempCol $tempRow $avgfile $datafilepath" EXIT INT HUP TERM 	# File cleanup maintenance 

# Dims function: Prints the dimensions of the matrix
# as the number of rows, followed by a space, then the number
# of columns (e.g. For a 5x6 matrix stdout will show '5 6')
dims() {
	rows=$(wc -l < $datafilepath)		# Get number of rows
	numcount=$(wc -w < $datafilepath)	# Get total number count
	cols=$(( numcount / rows ))		# Calculate number of columns
	echo "$rows $cols"			# Display rows and cols
}

# Transpose function: Reflects the elements of the matrix 
# along the main diagonal. (Eg. An MxN matrix becomes NxM)
# Values along the main diagonal will remain unchanged.
transpose() {
	i=0
	#Make input row file
	while read numberLine
	do
		colscount=0
		for each in $numberLine 
		do			
			colscount=$(( colscount + 1 ))
		done
		
		while [[ $i -lt $colscount ]]
		do
			(( i++ ))	
			col=$(cut -f $i $datafilepath | tr '\n' '\t')
			echo "${col%?}" >> $tempCol
		done
	done < $datafilepath
	cat < $tempCol
}

# Mean function: Takes an MxN matrix input and returns an 1xN
# row vector where the first element is the mean of column 1
# and the second element is the mean of column 2, and so on.
mean() {
	#Get the number of columns
	numcount=$( wc -w < $datafilepath)
	#echo "Number of nos.= $numcount"
	lincount=$( wc -l < $datafilepath)
	#echo "Number of lines= $lincount"
	colcount=$(( numcount / lincount))
	#echo "Number of cols= $colcount"

	#initialize counter var
	i=1

	while [[ $i -le $colcount ]]
	do 
	
		#initialize sum & avg for each column
		sum=0
		avg=0
	
		#cut columns and store into tempfile
		cutcol=$(cut -f $i $datafilepath)
		echo "$cutcol" > $tempCol
		#cat $tempCol

		#Read each numebr from the tempCol file and calculate sum
		while read number
		do
			sum=$(( sum + number )) 
		#	echo "Sum=$sum"
		done < $tempCol

		#Calculate float average
		avg=$(( ($sum + ($lincount/2) * (($sum>0)*2-1)) / $lincount ))
		#echo "Avg=$avg"
		
		#Append avg to avgfile 
		echo "$avg" >> $avgfile

		#Tranform avgfile from cols to rows (replace all newlines with tabs)
		display=$(cat $avgfile | tr '\n' '\t')

		#Overwrite avgfile with transformed display minus last tab
		echo "${display%?}" > $avgfile

	#Increment i value
	(( i++ ))

	done

	#Display avgfile to terminal
	cat $avgfile	

}

add() {
	# Declare arrays
	numarray1=( $(cat $datafilepath) )	# $Arg2 from command line
	numarray2=( $(cat $tempfile) )		# $Arg3 from command line
	
	# Initialize counter used to maintain array dimensions
	count=1

	# Iterate through all array elements
	for ((i=0; i<${#numarray1[@]};++i))	
	do
		# Calculate resulting sum iteratively from arrays
		sum=0
		sum=$(( ${numarray1[i]} + ${numarray2[i]} ))
	
		# Maintain dims of sum vector array with original 
		if [[ $count -lt $datafilepathcols ]]
		then
			# Print sum on same line separated by tab
			printf "%d\t" $sum 
		
			# Increment count var
			(( count++ ))
		else	
			# Print sum on new line
			printf "%d\n" $sum
			
			# Reset count for new row
			count=1
		fi
	done
}
	

# How the script handles piping stdout into stdin
# and stdin directly as a command line argument 
if [[ "$1" == "dims" ]] || [[ "$1" == "transpose" ]] || [[ "$1" == "mean" ]]
then
	if [[ $# -eq 1 ]]
	then
		cat > $datafilepath		#read in stdin to data file
	elif [[ $# -eq 2 ]]
	then
		datafilepath=$2
	else
		echo "Error: Invalid number of arguments." 1>&2
		exit 1
	fi	
elif [[ "$1" == "add" ]] #|| [[ "$1" == "multiply" ]]
then
	if [[ "$#" != "3" ]]  
	then
		echo "Invalid argument count. Enter two arguments only." 1>&2
		exit 1
	else 
		datafilepath=$2 
		tempfile=$3
		datafilepathlines=$(wc -l < $datafilepath)
		datafilepathwords=$(wc -w < $datafilepath)
		datafilepathcols=$(( datafilepathwords / datafilepathlines ))
		
		tempfilepathlines=$(wc -l < $tempfile)
		tempfilepathwords=$(wc -w < $tempfile)
		tempfilepathcols=$(( tempfilepathwords / tempfilepathlines ))

		if [[ $datafilepathlines != $tempfilepathlines ]] || [[ $datafilepathcols != $tempfilepathcols ]]
		then
			echo "Wrong sized matrices!" 1>&2
			exit 1
		fi
	fi
fi

# If number of args is greater than 2 or the file doesn't exist
# print error message to stderr, nothing to stdout and return 1
# else print the number of rows and cols to stdout and return 0
#if [ $# -gt 2 ] || [ $# -lt 1 ] 
#then
#	echo "Error: Improper argument count" 1>&2
#	exit 1
#fi

if [[ ! -f $datafilepath ]]
then
	echo "Error: File $datafilepath does not exist." 1>&2
	exit 1
fi

$1 "${@:2}"
