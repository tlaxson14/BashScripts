#!/bin/bash
# Name: Travis Laxson
# Date: Jan. 18 2019
# Description: This shell script computes matrix operations 
# including printing the dimensions, matrix transpositions,
# mean vector calculation, addition of two matrices, and
# multiplication of two matrices. 

datafilepath="datafile$$"
tempCol="tempcolfile$$"
tempRow="temprowfile$$"
tempfile="tempsumfile$$"
avgfile=$"tempavgfile$$"
trap "rm -f $datafilepath" EXIT INT HUP TERM 	# File cleanup maintenance 

# Dims function: Prints the dimensions of the matrix
# as the number of rows, followed by a space, then the number
# of columns (e.g. For a 5x6 matrix stdout will show '5 6')
dims() {	
	rows=0
	while read numberLine 
	do
		rows=$(( rows + 1 ))		# Update row count
		cols=0				# Initialize columns 	
		for i in $numberLine	# Iterate over each value per row
		do
			cols=$(( cols + 1 ))	# Update column count
		done
	done < $datafilepath			# Stdin from arg1 (or piping stdout file)
	echo "$rows $cols"			# Display rows and cols
}

if [ "$#" = "1" ]
then
	cat > $datafilepath			#read in stdin to data file
elif [ "$#" = "2" ]
then
	datafilepath=$2				
fi


transpose() {
	i=0
	#Make input row file
	while read numberLine
	do
		colscount=0
		for each in $numberLine 
		do			
			colscount=$(( colscount + 1 ))
		done
		
		while [[ $i -lt $colscount ]]
		do
			(( i++ ))	
			col=$(cut -f $i $datafilepath | tr '\n' '\t')
			echo "${col%?}" >> $tempCol
		done
	done < $datafilepath
	cat < $tempCol
}

mean() {
	#Get the number of columns
	numcount=$( wc -w < $datafilepath)
	#echo "Number of nos.= $numcount"
	lincount=$( wc -l < $datafilepath)
	#echo "Number of lines= $lincount"
	colcount=$(( numcount / lincount))
	#echo "Number of cols= $colcount"

	#initialize counter var
	i=1

	while [[ $i -le $colcount ]]
	do 
	
		#initialize sum & avg for each column
		sum=0
		avg=0
	
		#cut columns and store into tempfile
		cutcol=$(cut -f $i $datafilepath)
		echo "$cutcol" > $tempCol
		#cat $tempCol

		#Read each numebr from the tempCol file and calculate sum
		while read number
		do
			sum=$(( sum + number )) 
		#	echo "Sum=$sum"
		done < $tempCol

		#Calculate float average
		avg=$(( ($sum + ($lincount/2) * (($sum>0)*2-1)) / $lincount ))
		#echo "Avg=$avg"
		
		#Append avg to avgfile 
		echo "$avg" >> $avgfile

		#Tranform avgfile from cols to rows (replace all newlines with tabs)
		display=$(cat $avgfile | tr '\n' '\t')

		#Overwrite avgfile with transformed display minus last tab
		echo "${display%?}" > $avgfile

	#Increment i value
	(( i++ ))

	done

	#Display avgfile to terminal
	cat $avgfile	

}

#	i=0
	#Make input row file
#	while read numberLine
#	do
#		colscount=0
#		for each in $numberLine 
#		do			
			#echo "Num=$each"
#			colscount=$(( colscount + 1 ))
#		done
#		colscount=$(( colscount * 2))
		#echo "colcount=$colscount"
	
#		while [[ $i -lt $colscount ]]
#		do
#			(( i++ ))
			#echo "i=$i"
#			out=$(( i % 2 ))
#			if [[ $out -eq 0 ]]
#			then
				:
#			else
#				sum=0
#				col=$(cut -c $i $datafilepath) #| tr '\n' '\t')
				#echo "$col"
#				echo "$col" > $tempCol
	
#				while read num
#				do
#					lincount=$( wc -l < $tempCol)
#					sum=$(( sum + num ))
#					avg=$(( ($sum + ($lincount/2) * (($sum>0)*2-1)) / $lincount ))
#				done < $tempCol
				
				#echo "avg=$avg"
#				echo "$avg" >> $tempRow
#				display=$(cat $tempRow | tr '\n' '\t')
#			fi
#		(( i++ ))
#		done
#	done < $datafilepath
#	echo "${display%?}" >> $tempfile
#	cat < $tempfile
	#echo "${display%?}"

#}
	

# If number of args is greater than 2 or the file doesn't exist
# print error message to stderr, nothing to stdout and return 1
# else print the number of rows and cols to stdout and return 0
if [ $# -gt 2 ] || [ $# -lt 1 ] 
then
	echo "Error: Improper argument count" 1>&2
	exit 1
fi

if [ ! -f $datafilepath ]
then
	echo "Error: File $datafilepath does not exist." 1>&2
	exit 1
fi

$1 "${@:2}"


